package  {		import flash.display.MovieClip;		import flash.net.URLRequest;		import flash.media.Sound;	import flash.media.SoundChannel;	import flash.media.SoundTransform;	import flash.media.ID3Info;		import flash.events.Event;	import flash.events.ProgressEvent;	import flash.events.IOErrorEvent;	import flash.events.MouseEvent;		import flash.text.TextField;		import flash.errors.IOError;		public class loadmp3 extends MovieClip{				// current playing position		var currentpos: uint = 0;				var myURL = "2.mp3"		var myURLRequest : URLRequest = new URLRequest(myURL);				var mySound : Sound = new Sound();		var mySoundChannel : SoundChannel;		var mySoundTransform : SoundTransform = new SoundTransform(0.5,0.0);				var myPlayPause : MovieClip = new playpause();		var myVolUp :     MovieClip = new volup();		var myVolDown :   MovieClip = new voldown();		var myBalanceR :  MovieClip = new BalR;		var myBalanceL :  MovieClip = new BalL;				var ispaused: Boolean = true;				id3Box   : TextField;		loadinfo : TextField;				public function loadmp3() {			mp3loader();		}				function mp3loader() {			mySound.addEventListener(Event.ID3,showID3);			mySound.addEventListener(ProgressEvent.PROGRESS,showProgress);						mySound.addEventListener(IOErrorEvent.IO_ERROR,handleIOError);						//mySound.addEventListener(Event.COMPLETE,onComplete);						mySound.load(myURLRequest);						addChild(myPlayPause);			myPlayPause.gotoAndStop("play");			myPlayPause.x = stage.stageWidth / 2;			myPlayPause.y = 100;			myPlayPause.addEventListener(MouseEvent.CLICK,onplaypause);			myVolUp.x   = stage.stageWidth / 2 + 100;			myVolDown.x = stage.stageWidth / 2 + 100 + myVolDown.width * 1.2;			myVolUp.y = myVolDown.y = 100;			myBalanceR.x = stage.stageWidth / 2 - 100;			myBalanceL.x = stage.stageWidth / 2 - 100 - 1.2 * myBalanceR.width;			myBalanceL.y = myBalanceR.y = 100;			addChild(myVolUp);			addChild(myVolDown);			addChild(myBalanceL);			addChild(myBalanceR);			myVolUp.addEventListener(MouseEvent.CLICK,onvolup);			myVolDown.addEventListener(MouseEvent.CLICK,onvoldown);		}				private function onplaypause(e:MouseEvent) {			if (ispaused) {					mySoundChannel = mySound.play(currentpos);					mySoundChannel.soundTransform = mySoundTransform;					ispaused = false;					myPlayPause.gotoAndStop("pause");					myBalanceR.addEventListener(MouseEvent.CLICK,onBR);					myBalanceL.addEventListener(MouseEvent.CLICK,onBL);			} else {					ispaused = true;					myPlayPause.gotoAndStop("play");					currentpos = mySoundChannel.position;					mySoundChannel.stop();					myBalanceR.removeEventListener(MouseEvent.CLICK,onBR);					myBalanceL.removeEventListener(MouseEvent.CLICK,onBL);			}		}											private function showID3(e:Event) {				trace(e.type);				var id3str = new String();								var id3Props: ID3Info = e.target.id3;				trace(id3Props);				if (id3Props.artist) id3str += "artista = "+id3Props.artist + "\n";				if (id3Props.songName) id3str += "tema = "+id3Props.songName + "\n";				if (id3Props.album) id3str += "album = "+id3Props.album + "\n";				if (id3Props.year) id3str += "ano = "+id3Props.year + "\n";				for (var propName:String in id3Props) {					//id3str += propName + " = " + id3Props [propName] + "\n";						id3Box.text = id3str;					//trace(id3str);					//trace("ID3 Tag", propName, "=", id3Props [propName]);				}				id3Box.text = id3str;		}						private function showProgress(e:ProgressEvent) {			trace("carregados : " + e.bytesLoaded + " de " + e.bytesTotal);			loadinfo.text = Math.floor(e.bytesLoaded / e.bytesTotal * 100).toString() + "%";		}						private function handleIOError(e:IOErrorEvent) {			trace("ERRO - - - - ",e.text);					}				private function onComplete(e:Event) {			//playIt();		}						private function playIt() {			mySound.play();		}				private function onvolup(e:MouseEvent) {			var _vol = mySoundTransform.volume;			_vol = _vol + 0.1;			if (_vol > 1.0) _vol = 1.0;			mySoundTransform.volume = _vol;			mySoundChannel.soundTransform = mySoundTransform;			trace(mySoundChannel.soundTransform.volume);		}				private function onvoldown(e:MouseEvent) {			var _vol = mySoundTransform.volume;			_vol = _vol - 0.1;			if (_vol < 0.0) _vol = 0.0;			mySoundTransform.volume = _vol;			mySoundChannel.soundTransform = mySoundTransform;			trace(mySoundChannel.soundTransform.volume);		}				private function onBL(e:MouseEvent) {			var _pan = mySoundTransform.pan;			_pan = _pan - 0.1;			if (_pan < -1.0) _pan = -1.0;			mySoundTransform.pan = _pan;			mySoundChannel.soundTransform = mySoundTransform;			trace(mySoundChannel.soundTransform.pan);		}				private function onBR(e:MouseEvent) {			var _pan = mySoundTransform.pan;			_pan = _pan + 0.1;			if (_pan > 1.0) _pan = 1.0;			mySoundTransform.pan = _pan;			mySoundChannel.soundTransform = mySoundTransform;			trace(mySoundChannel.soundTransform.pan);			}							}}