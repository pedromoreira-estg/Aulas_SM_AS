package  {		import flash.display.MovieClip;	import flash.events.MouseEvent;	import flash.display.DisplayObject;	import flash.geom.Point;			public class COvo extends MovieClip {						var myfrascos : MovieClip;		public function COvo(frascos) {			// constructor code			addEventListener(MouseEvent.MOUSE_DOWN,ondrag);			myfrascos = frascos;		}				private function ondrag(e:MouseEvent) {			var coord_global = new Point();			var coord_novo   = new Point();						//trace("t",e.target);			//trace("ct",e.currentTarget);			//trace(stage);			e.stopImmediatePropagation();						parent.setChildIndex(this,parent.numChildren-1);						if (parent) {				var s = stage;				coord_global = parent.localToGlobal(new Point(x,y));				coord_novo   = s.globalToLocal(coord_global);				x = coord_novo.x;				y = coord_novo.y;				s.addChild(this);			}						startDrag();			removeEventListener(MouseEvent.MOUSE_DOWN,ondrag);			addEventListener(MouseEvent.MOUSE_UP,offdrag);					}				private function offdrag(e:MouseEvent) {						var coord_actual = new Point();			var coord_global = new Point();			var coord_novo   = new Point();						var enfrasca : Boolean = false;			for (var f=myfrascos.numChildren -1 ; f >= 0; f--) {				if (hitTestObject(myfrascos.getChildAt(f))) {					enfrasca = true;					trace("frasco",f);					break;				}			}			if (enfrasca) {				//trace(x,y);				coord_global = parent.localToGlobal(new Point(x,y));				coord_novo   = myfrascos.getChildAt(f).globalToLocal(coord_global);				x = coord_novo.x;				y = coord_novo.y;				var frasco =  myfrascos.getChildAt(f) as MovieClip;				trace(frasco);				frasco.addChild(this);								trace(x,y);			} else {				stage.addChild(this);			}			stopDrag();			addEventListener(MouseEvent.MOUSE_DOWN,ondrag);			removeEventListener(MouseEvent.MOUSE_UP,offdrag);		}			}	}