/** * (c) pedro moreira 2009-2011 ------ ESTG-IPVC * Sistemas Multimédia / Tecnologias Multimédia * **/// NOTA// para correr estes exemplos// 1) - crie um novo documento flash actionscript 3 (.fla)// 2) - coloque como document class a classe implementada por este package (naudiovideo)// 3) - salve-o na mesma pasta que este packagepackage {		// MovieClip	import flash.display.MovieClip;	// Classes para o input de Camera e Microfone	import flash.media.Camera;		import flash.media.Microphone;	// video	import flash.media.Video;	// eventos	import flash.events.Event;	// evento de actividade (microfone e camara)	import flash.events.ActivityEvent;		public class naudiovideo extends MovieClip{			var mymic 	: Microphone;		// var para instancia de microfone		var mycam 	: Camera;				// var para instancia de Camera		var myvideo : Video;				// vara para nstancia de Video						// bolas para monitorizar actividade de		// microfone e de Video		var ballAudio : Ball = new Ball();		var ballVideo : Ball = new Ball();				public function naudiovideo() {						// posicionar as bolas			ballAudio.x = 150;			ballVideo.x = 400;			ballAudio.y = ballVideo.y = 250;			// mostrar bolas			addChild(ballAudio);			addChild(ballVideo);						// instanciar um novo video 			myvideo = new Video(80,60);						// descobrir / associar o microfone			mymic = Microphone.getMicrophone();		// Mic do sistema por defeito			mymic.setLoopBack();						// definir nível de ruído mínimo para detecção (10)			// e o tempo (0.5 segundo) mínimo entre cada detecção			mymic.setSilenceLevel(10,100);			// descobrir / associar a Web Cam			mycam = Camera.getCamera();			// definir nível de actividade mínima para detecção (50)			// e o tempo (0.5 segundo) mínimos entre cada detecção			mycam.setMotionLevel(50,500);						// este evento dispara na mudança de actividade da câmara			// nivel de actividade da camera			// vai incrementar os contadores			mycam.addEventListener(ActivityEvent.ACTIVITY,onmotion);						// associar a camera à instância de Video			// o que permite visualizar no stage			myvideo.attachCamera(mycam);			addChild(myvideo);						// este evento dispara na mudança de actividade do mic			// nivel de actividade da mic			// vai incrementar os contadores			mymic.addEventListener(ActivityEvent.ACTIVITY,onclap);						// este evento vai mostrar através da escala			// o nível de actividade do audio e video			addEventListener(Event.ENTER_FRAME,mostraActividade);		}				private function mostraActividade(ev:Event){			ballAudio.scale(mymic.activityLevel);			ballVideo.scale(mycam.activityLevel);		}				private function onmotion(ev:ActivityEvent){			// o evento dispara ao activar e desactivar			// estamos a contar sempre que passa para activo			if (ev.activating == true) {				ballVideo.incCount();			}			// apenas para perceber melhor o mecanismo de detecção			if (ev.activating == true) {				trace("motion detected");			} else {				trace("no motion ");			}		}				private function onclap(ev: ActivityEvent) {			// o evento dispara ao activar e desactivar			// estamos a contar sempre que passa para activo			if (ev.activating == true) {				ballAudio.incCount();			}		}			}	} //----------------------------------------// Classe não exposta// uso interno// bolas//----------------------------------------import flash.display.MovieClip;import flash.text.TextField;import flash.display.Graphics;import flash.text.TextFormat;import flash.text.TextFormatAlign;import flash.text.TextFieldAutoSize;class Ball extends MovieClip {		var countTxt 	: TextField;	var count 		: uint = 0;		public function Ball() {				countTxt 	= new TextField();		trace(countTxt);		var myGraphics 	: Graphics 		= this.graphics;				// desenhar circunferencia		myGraphics.beginFill(0xCCFFCC);		myGraphics.drawCircle(0,0,100);		myGraphics.endFill();		// outra mais interior		myGraphics.beginFill(0x111111);		myGraphics.drawCircle(0,0,66);		myGraphics.endFill();											// texto : questoes de aparencia		countTxt.autoSize = TextFieldAutoSize.CENTER;		// texto : formato : definir um formato de texto		var tf : TextFormat = new TextFormat();		tf.size 						= "60";		tf.align 						= TextFormatAlign.CENTER;		tf.color 						= 0xffff88;				// texto : torna-lo o formato por defeito		countTxt.defaultTextFormat = tf;					// escrever uma string inicial		countTxt.text = count.toString();				// centrar o campo de texto na bola		countTxt.x = - countTxt.textWidth / 2;		countTxt.y = - countTxt.textHeight / 2;							// coloca-lo na bola		addChild(countTxt);	}		// incrementa contador	public function incCount() {		count++;		updateCount();	}	// reset contador	public function resetCount() {		count = 0;		updateCount();	}	// decrementa contador	public function decCount() {		count--;		updateCount();	}	// set contador	public function setCount(v:uint) {		count = v;		updateCount();	}		private function updateCount() {		countTxt.text = count.toString();	}		public function scale(level:uint) {			var scale = 0.5 + level / 20;			scaleX = scaleY = scale;		}	}